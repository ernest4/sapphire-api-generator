"use strict";

exports.introSources = (app_name, introFileName) => {
  let introSourcesArray = [];

  const utilsIntroSource = `This folder is for utterly generic utility functions and classes which are not specific to web apps
in general. For e.g. a function milisToMinutes(miliseconds) which does time manipulation and has
nothing specific to do with Express or web apps in general, but may be used all over the app.
`;

  const sharedIntroSource = `Code that is broadly shared all throughout the web app shall go here. Even if the code is a once
off used in the app, if it doesn't really belong in services, models, controller etc. it shall go
here.
`;

  const controllerIntroSource = `Controllers extract the data from requests pass it services and return their responses to users.
Controllers get called by the routes handler.

The express context ends here, the services are generic functions that don't deal with 'requests' or
'bodies' of requests. The services deal with simple inputs that can be anything and are routing
framework agnostic.

Controllers are 'thin' and minimal.
`;

  const modelsIntroSource = `Models encapsulate the database information such as schemas, validations, indexes etc.
All of the models are imported into all.models.js and exported as a single function in server.js

Models will be accessed by services.

Models are 'thin' and minimal.
`;

  const routesIntroSource = `Routes tie together the URLs and controllers and any accompanying middleware such as authorization.
All of the routes are imported into all.routes.js and exported as a single function to wrap around
the app object in server.js

Routes are 'thin' and minimal.
`;

  const servicesIntroSource = `Services is where all the business logic lives. Services are 'fat' and contain everything they need
to do their jobs. Initialized by controllers, Services ultimately respond back to controllers.
`;

  const customIntroSource = `You may write your own integration tests here!`;

  const generatedIntroSource = `DO NOT MODIFY THESE TESTS!

These test are generated by Sapphire from the JSON backed model schemas. Every
time a new asset gets created, or an existing asset gets modified, the tests
are regenerated from scratch. Thus any tests written here by hand may be lost!
  
If youâ€™d like to add more tests, even to the same asset, please use the CUSTOM
test directly.`;

  const integrationIntroSource = `Integration testing tests the entire request response cycle and consequently
hits all the components, the routes, the controllers, the model and the
services in one test.`;

  const unitIntroSource = `Unit testing tests the single smallest logical unit of the application, a single
function or class to ensure it works in isolation.`;

  introSourcesArray.push({
    path: `${app_name}/_utils/${introFileName}`,
    source: utilsIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/api/shared/${introFileName}`,
    source: sharedIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/api/v1/controllers/${introFileName}`,
    source: controllerIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/api/v1/models/${introFileName}`,
    source: modelsIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/api/v1/routes/${introFileName}`,
    source: routesIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/api/v1/services/${introFileName}`,
    source: servicesIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/tests/integration/v1/custom/${introFileName}`,
    source: customIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/tests/integration/v1/generated/${introFileName}`,
    source: generatedIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/tests/integration/${introFileName}`,
    source: integrationIntroSource
  });
  introSourcesArray.push({
    path: `${app_name}/tests/unit/${introFileName}`,
    source: unitIntroSource
  });
  

  return introSourcesArray;
};
