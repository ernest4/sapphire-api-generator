"use strict";

const capitalize = require("../../../utils/capitalize");

exports.editableTestSource = (asset, options) => `"use strict";

const mongoose = require("mongoose");
const ${capitalize(asset)} = require("../../../../api/v${
  options.apiv
}/models/${asset}/${asset}.model");

//Require the dev-dependencies
const chai = require("chai"); // should matchers etc.
const chaiHttp = require("chai-http"); // request().get() ...
const dotEnv = require("dotenv");
// make variables available from .env locally
dotEnv.config();
const server = require("../../../../server"); // your app
${options.auth ? `const { getAccessToken } = require("../../utils");` : ""}

// set up
const should = chai.should();
chai.use(chaiHttp);

// NOTE: using arrow functions as mocha functions is discouraged, thus function() is used!
describe("[CUSTOM TEST] ${capitalize(asset)} asset endpoints\\n", function() {
  this.timeout(10000);


  ${
    options.auth
      ? `// UNCOMMENT THE CODE BLOCK BELOW IF YOU WANT ACCESS TO AUTH0 AUTHORIZATION TOKEN

  // let access_token = "";

  // before(async function() {
  //   // runs before all tests in this block

  //   // get auth0 token for accessing api
  //   access_token = await getAccessToken();
  // });`
      : ""
  }

  beforeEach(function(done) {
    //Before each test empty the database and start clean
    ${capitalize(asset)}.deleteMany({}, err => {
      done();
    });
  });

  describe("<HTTP_VERB_HERE> /${asset}", function() {
    it("it should be your test case here", function() {
      // ... your test
      const dummy_sum = 1+1;
      dummy_sum.should.equal(2);
    });
  });
});
`;

exports.generatedTestSource = (asset, options, model) => {
  let testCases = "";
  if (model) {
    testCases = `// describe("POST /${asset}", () => {
    //   it("it should not create a ${capitalize(asset)} without socialId field", done => {
    //     const ${asset} = {
    //       // socialId: "hdshasdsfkdgjfd",
    //       fullName: "testy_name_1 testy_surname_0",
    //       gender: "m",
    //       birthday: Date.now
    //     };
    //     chai
    //       .request(server)
    //       .post("/api/v1/${asset}")
    //       .set("Authorization", \`Bearer \${access_token}\`)
    //       .send(${asset})
    //       .end((err, res) => {
    //         res.should.have.status(200);
    //         // res.body.should.be.a("object");
    //         // res.body.should.have.property("errors");
    //         // res.body.errors.should.have.property("socialId");
    //         // res.body.errors.socialId.should.have.property("kind").eql("required");
    //         done();
    //       });
    //   });
    // });`;
  }

  return `"use strict";

// DO NOT MODIFY THIS TEST!

// These test are generated by Sapphire from the JSON backed model schemas. Every
// time a new asset gets created, or an existing asset gets modified, the tests
// are regenerated from scratch. Thus any tests written here by hand may be lost!
  
// If youâ€™d like to add more tests, even to the same asset, please use the
// ${asset}Custom.test.js in 'custom' tests folder

const mongoose = require("mongoose");
const ${capitalize(asset)} = require("../../../../api/v1/models/${asset}/${asset}.model");

//Require the dev-dependencies
const chai = require("chai"); // should matchers etc.
const chaiHttp = require("chai-http"); // request().get() ...
const dotEnv = require("dotenv");
// make variables available from .env locally
dotEnv.config();
const server = require("../../../../server"); // your app
${options.auth ? `const { getAccessToken } = require("../../utils");` : ""}

// set up
const should = chai.should();
chai.use(chaiHttp);

// NOTE: using arrow functions as mocha functions is discouraged, thus function() is used!
describe("[SAPPHIRE TEST] ${capitalize(asset)} asset endpoints\\n", function() {
  this.timeout(10000);

  ${
    options.auth
      ? `let access_token = "";

  before(async function() {
    // runs before all tests in this block

    // get auth0 token for accessing api
    access_token = await getAccessToken();
  });`
      : ""
  }

  beforeEach(function(done) {
    //Before each test empty the database and start clean
    ${capitalize(asset)}.deleteMany({}, err => {
      done();
    });
  });

  describe("GET /${asset}", function() {
    it("it should get all the ${capitalize(asset)}", function(done) {
      chai
        .request(server)
        .get("/api/v1/${asset}")
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a("array");
          res.body.length.should.be.eql(0);
          done();
        });
    });
  });

  // SAPPHIRE TEST CASE GENERATION WIP....
  ${testCases}
});
`;
};
