"use strict";

const capitalize = require("../../../utils/capitalize");

exports.editableTestSource = (asset, options) => `"use strict";

const mongoose = require("mongoose");
const ${capitalize(asset)} = require("../../../../api/v${
  options.apiv
}/models/${asset}/${asset}.model");

//Require the dev-dependencies
const chai = require("chai"); // should matchers etc.
const chaiHttp = require("chai-http"); // request().get() ...
const dotEnv = require("dotenv");
// make variables available from .env locally
dotEnv.config();
const server = require("../../../../server"); // your app
${options.auth ? `const { getAccessToken } = require("../../utils");` : ""}

// set up
const should = chai.should();
chai.use(chaiHttp);

// NOTE: using arrow functions as mocha functions is discouraged, thus function() is used!
describe("[CUSTOM TEST] ${capitalize(asset)} asset endpoints\\n", function() {
  this.timeout(10000);


  ${
    options.auth
      ? `// UNCOMMENT THE CODE BLOCK BELOW IF YOU WANT ACCESS TO AUTH0 AUTHORIZATION TOKEN

  // let access_token = "";

  // before(async function() {
  //   // runs before all tests in this block

  //   // get auth0 token for accessing api
  //   access_token = await getAccessToken();
  // });`
      : ""
  }

  beforeEach(function(done) {
    //Before each test empty the database and start clean
    ${capitalize(asset)}.deleteMany({}, err => {
      done();
    });
  });

  describe("<HTTP_VERB_HERE> /${asset}", function() {
    it("it should be your test case here", function() {
      // ... your test
      const dummy_sum = 1+1;
      dummy_sum.should.equal(2);
    });
  });
});
`;

exports.generatedTestSource = (asset, options, model) => {
  let testCases = "";
  if (model) {
    console.log("in generatedTestSource");
    console.log(asset);
    console.log(options);
    console.log(model);

    testCasesArray.forEach(testCaseGenerator => {
      testCases += testCaseGenerator(asset, options, model);
    });
  }

  return `"use strict";

// DO NOT MODIFY THIS TEST!

// These test are generated by Sapphire from the JSON backed model schemas. Every
// time a new asset gets created, or an existing asset gets modified, the tests
// are regenerated from scratch. Thus any tests written here by hand may be lost!
  
// If youâ€™d like to add more tests, even to the same asset, please use the
// ${asset}Custom.test.js in 'custom' tests folder

const mongoose = require("mongoose");
const ${capitalize(asset)} = require("../../../../api/v1/models/${asset}/${asset}.model");

//Require the dev-dependencies
const chai = require("chai"); // should matchers etc.
const chaiHttp = require("chai-http"); // request().get() ...
const dotEnv = require("dotenv");
// make variables available from .env locally
dotEnv.config();
const server = require("../../../../server"); // your app
${options.auth ? `const { getAccessToken } = require("../../utils");` : ""}

// set up
const should = chai.should();
chai.use(chaiHttp);

// NOTE: using arrow functions as mocha functions is discouraged, thus function() is used!
describe("[SAPPHIRE TEST] ${capitalize(asset)} asset endpoints\\n", function() {
  this.timeout(10000);

  ${
    options.auth
      ? `let access_token = "";

  before(async function() {
    // runs before all tests in this block

    // get auth0 token for accessing api
    access_token = await getAccessToken();
  });`
      : ""
  }

  beforeEach(function(done) {
    //Before each test empty the database and start clean
    ${capitalize(asset)}.deleteMany({}, err => {
      done();
    });
  });

  // SAPPHIRE TEST CASE GENERATION WIP....
  ${testCases}
});
`;
};

function generateTestCaseGET(asset, options, model) {
  let saveFields = "";
  let saveFieldsObject = {};

  for (const field in model) {
    saveFieldsObject[field] = "TESTING!!!";
  }

  saveFields = JSON.stringify(saveFieldsObject);
  saveFields = saveFields.replace(/{/, "");
  saveFields = saveFields.replace(/}/, "");
  saveFields = saveFields.replace(/,/g, ",\n\t\t\t\t");

  console.log(saveFields);

  return `describe("GET /${asset}", function() {
    it("it should get all the ${capitalize(asset)}", function(done) {
      chai
        .request(server)
        .get("/api/v1/${asset}")
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a("array");
          res.body.length.should.be.eql(0);
          done();
        });
    });
  });

  describe("GET /${asset}/:id", () => {
    it("it should GET ${capitalize(asset)} by the given id", done => {
      let ${asset} = new ${capitalize(asset)}({
        ${saveFields}
      });
      ${asset}.save((err, ${asset}) => {
        chai
          .request(server)
          .get("/${asset}/" + ${asset}.id)
          .send(${asset})
          .end((err, res) => {
            res.should.have.status(200);
            res.body.should.be.a("object");
            res.body.should.have.property("title");
            res.body.should.have.property("author");
            res.body.should.have.property("pages");
            res.body.should.have.property("year");
            res.body.should.have.property("_id").eql(${asset}.id);
            done();
          });
      });
    });
  });
  `;
}

function generateTestCasePOST(asset, options, model) {
  return `
  describe("/POST book", () => {
    it("it should not POST a book without pages field", done => {
      let book = {
        title: "The Lord of the Rings",
        author: "J.R.R. Tolkien",
        year: 1954
      };
      chai
        .request(server)
        .post("/book")
        .send(book)
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a("object");
          res.body.should.have.property("errors");
          res.body.errors.should.have.property("pages");
          res.body.errors.pages.should.have.property("kind").eql("required");
          done();
        });
    });
    it("it should POST a book ", done => {
      let book = {
        title: "The Lord of the Rings",
        author: "J.R.R. Tolkien",
        year: 1954,
        pages: 1170
      };
      chai
        .request(server)
        .post("/book")
        .send(book)
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a("object");
          res.body.should.have.property("message").eql("Book successfully added!");
          res.body.book.should.have.property("title");
          res.body.book.should.have.property("author");
          res.body.book.should.have.property("pages");
          res.body.book.should.have.property("year");
          done();
        });
    });
  });
  `;
}

function generateTestCasePUT(asset, options, model) {
  return `
  describe("PUT /${asset}/:id", () => {
    it("it should UPDATE a book given the id", done => {
      let book = new Book({
        title: "The Chronicles of Narnia",
        author: "C.S. Lewis",
        year: 1948,
        pages: 778
      });
      book.save((err, book) => {
        chai
          .request(server)
          .put("/book/" + book.id)
          .send({ title: "The Chronicles of Narnia", author: "C.S. Lewis", year: 1950, pages: 778 })
          .end((err, res) => {
            res.should.have.status(200);
            res.body.should.be.a("object");
            res.body.should.have.property("message").eql("Book updated!");
            res.body.book.should.have.property("year").eql(1950);
            done();
          });
      });
    });
  });
  `;
}

function generateTestCaseDELETE(asset, options, model) {
  return `
  describe("DELETE /${asset}/:id", () => {
    it("it should DELETE a ${capitalize(asset)} given the id", done => {
      let ${asset} = new ${capitalize(asset)}({
        title: "The Chronicles of Narnia",
        author: "C.S. Lewis",
        year: 1948,
        pages: 778
      });
      ${asset}.save((err, ${asset}) => {
        chai
          .request(server)
          .delete("/${asset}/" + ${asset}.id)
          .end((err, res) => {
            res.should.have.status(200);
            res.body.should.be.a("object");
            res.body.should.have.property("message").eql("${capitalize(
              asset
            )} successfully deleted!");
            res.body.result.should.have.property("ok").eql(1);
            res.body.result.should.have.property("n").eql(1);
            done();
          });
      });
    });
  });
  `;
}

let testCasesArray = [];
testCasesArray.push(generateTestCaseGET);
testCasesArray.push(generateTestCasePOST);
testCasesArray.push(generateTestCasePUT);
testCasesArray.push(generateTestCaseDELETE);
